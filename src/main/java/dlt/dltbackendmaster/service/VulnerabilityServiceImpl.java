package dlt.dltbackendmaster.service;

import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;

import org.springframework.stereotype.Service;

import dlt.dltbackendmaster.domain.Beneficiaries;
import dlt.dltbackendmaster.util.Utility;

@Service
public class VulnerabilityServiceImpl implements VulnerabilityService {

	@Override
	public boolean isVulnerable(Beneficiaries beneficiary) {

		LocalDate enrollmentDate = dateToLocalDate(beneficiary.getEnrollmentDate());

		if (enrollmentDate.isBefore(cOPStartDate()) && beneficiary.getVulnerable() == 1) {
			return true;
		}

		int vulnerabilities[] = getBeneficiaryVulnerabilities(beneficiary);

		int age = vulnerabilities[2];

		if (vulnerabilities[1] > 0) {
			return true;
		} else if (age > 14 && age < 18) {
			return vulnerabilities[0] > 1;
		} else {
			return vulnerabilities[0] > 0;
		}
	}

	@Override
	public boolean isVulnerablePastCops(Beneficiaries beneficiary) {

		LocalDate cutOffDate = LocalDate.of(2022, 1, 1);
		LocalDate dateCreated = dateToLocalDate(beneficiary.getDateCreated());

		Date birthDate = beneficiary.getDateOfBirth();
		if (birthDate == null) {
			return false;
		}
		int ageAtRegistration = Utility.dateDiffInYears(birthDate, beneficiary.getDateCreated());

		return beneficiary.getGender() == '2' && ageAtRegistration > 8
				&& ((beneficiary.getVbltTestedHiv() != null && beneficiary.getVbltTestedHiv().compareTo("2") < 0
						&& dateCreated.isBefore(cutOffDate)) || nullToZero(beneficiary.getVbltMultiplePartners()) == 1
						|| nullToZero(beneficiary.getVbltIsDeficient()) == 1
						|| nullToZero(beneficiary.getVbltVbgVictim()) == 1
						|| nullToZero(beneficiary.getVbltAlcoholDrugsUse()) == 1
						|| nullToZero(beneficiary.getVbltStiHistory()) == 1
						|| (nullToZero(beneficiary.getVbltSexualExploitation())) == 1
						|| ((nullToZero(beneficiary.getVbltHouseSustainer()) == 1
								|| nullToZero(beneficiary.getVbltMarriedBefore()) == 1
								|| (nullToZero(beneficiary.getVbltPregnantBefore())) == 1
								|| nullToZero(beneficiary.getVbltChildren()) == 1
								|| nullToZero(beneficiary.getVbltTraffickingVictim()) == 1
								|| nullToZero(beneficiary.getVbltIsMigrant()) == 1) && ageAtRegistration < 20)
						|| ((nullToZero(beneficiary.getVbltSexuallyActive()) == 1
								|| nullToZero(beneficiary.getVbltPregnantOrBreastfeeding()) == 1
								|| (beneficiary.getVbltIsStudent() != null && beneficiary.getVbltIsStudent() == 0)
								|| (beneficiary.getVbltIsEmployed() != null
										&& (!beneficiary.getVbltIsEmployed().equals("0")
												|| !beneficiary.getVbltIsEmployed().equals("NÃ£o Trabalha")))
								|| nullToZero(beneficiary.getVbltIsOrphan()) == 1) && ageAtRegistration < 18)
						|| (nullToZero(beneficiary.getVbltSexWorker()) == 1 && ageAtRegistration > 17));

	}

	private int[] getBeneficiaryVulnerabilities(Beneficiaries beneficiary) {
		int vulnerabilities[] = new int[3];

		int age = Utility.calculateAge(beneficiary.getDateOfBirth());
		vulnerabilities[2] = age;

		if (age > 8 && age < 18) {
			vulnerabilities[0] = nullToZero(beneficiary.getVbltHouseSustainer())
					+ (beneficiary.getVbltIsStudent() == 0 ? 1 : 0) + nullToZero(beneficiary.getVbltIsDeficient())
					+ nullToZero(beneficiary.getVbltMarriedBefore()) + nullToZero(beneficiary.getVbltIdp());
			if (beneficiary.getVbltMultiplePartners() != null) {
				vulnerabilities[1] = (age < 15 && beneficiary.getVbltSexuallyActive() != 0 ? 1 : 0)
						+ nullToZero(beneficiary.getVbltPregnantOrHasChildren())
						+ nullToZero(beneficiary.getVbltMultiplePartners())
						+ nullToZero(beneficiary.getVbltSexualExploitationTraffickingVictim())
						+ nullToZero(beneficiary.getVbltVbgVictim()) + nullToZero(beneficiary.getVbltAlcoholDrugsUse())
						+ nullToZero(beneficiary.getVbltStiHistory());
			}
		} else if (age > 17 && age < 25) {
			vulnerabilities[0] = nullToZero(beneficiary.getVbltIsDeficient()) + nullToZero(beneficiary.getVbltIdp());
			if (beneficiary.getVbltMultiplePartners() != null) {
				vulnerabilities[1] = beneficiary.getVbltMultiplePartners()
						+ nullToZero(beneficiary.getVbltSexualExploitationTraffickingVictim())
						+ nullToZero(beneficiary.getVbltSexWorker()) + nullToZero(beneficiary.getVbltVbgVictim())
						+ nullToZero(beneficiary.getVbltAlcoholDrugsUse())
						+ nullToZero(beneficiary.getVbltStiHistory());
			}
		}

		return vulnerabilities;
	}

	private Byte nullToZero(Byte value) {
		return value == null ? 0 : value;
	}

	private LocalDate cOPStartDate() {
		LocalDate copStartDate = null;

		LocalDate today = LocalDate.now();

		int day = today.getDayOfMonth();
		int month = today.getMonthValue();
		int year = today.getYear();

		if (month < 9 || (month == 9 && day < 21)) {
			copStartDate = LocalDate.of(year - 1, 9, 21);
		} else if (month > 9 || (month == 9 && day > 20)) {
			copStartDate = LocalDate.of(year, 9, 21);
		}

		return copStartDate;
	}

	private LocalDate dateToLocalDate(Date dateToConvert) {
		return dateToConvert.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
	}

}
