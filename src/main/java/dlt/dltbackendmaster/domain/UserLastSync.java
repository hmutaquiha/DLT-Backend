package dlt.dltbackendmaster.domain;
// Generated Jul 12, 2022, 4:54:56 PM by Hibernate Tools 5.2.12.Final

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * AlphanumericSequence generated by hbm2java
 */
@Entity
@Table(name = "users_last_sync", catalog = "dreams_db")
@NamedQueries({
		@NamedQuery(name = "UserLastSync.findByUsername", query = "SELECT a FROM UserLastSync a WHERE a.username =:username order by a.lastSyncDate desc"),
		@NamedQuery(name = "UserLastSync.findAll", query = "SELECT distinct u FROM UserLastSync u "
				+ " LEFT JOIN u.user.districts d "
				+ " Where concat(u.user.name, \' \' ,u.user.surname) like concat('%',:searchName,'%') "
				+ " AND u.username like :searchUsername "
				+ " AND (:searchUserCreator IS NULL OR u.user.createdBy = :searchUserCreator OR u.user.updatedBy =:searchUserCreator) "
				+ " AND (:searchDistrict IS NULL OR d.id = :searchDistrict)"
				+ " AND (:searchEntryPoint IS NULL OR u.user.entryPoint = cast(:searchEntryPoint as string)) order by u.lastSyncDate desc "),
		@NamedQuery(name = "UserLastSync.countAll", query = "SELECT count(distinct u.id) FROM UserLastSync u "
				+ " LEFT JOIN u.user.districts d "
				+ " Where concat(u.user.name, \' \' ,u.user.surname) like concat('%',:searchName,'%') "
				+ " AND u.username like :searchUsername "
				+ " AND (:searchUserCreator IS NULL OR u.user.createdBy = :searchUserCreator OR u.user.updatedBy =:searchUserCreator) "
				+ " AND (:searchDistrict IS NULL OR d.id = :searchDistrict)"
				+ " AND (:searchEntryPoint IS NULL OR u.user.entryPoint = cast(:searchEntryPoint as string)) "), })
@NamedNativeQueries({
		@NamedNativeQuery(name = "UserLastSync.findByDistricts", query = "SELECT uls.* FROM users_last_sync uls  "
				+ "left join users u on u.id = uls.user_id " 
				+ "LEFT JOIN users_districts ud on ud.user_id = u.id "
				+ "where concat(u.name, \' \' ,u.surname) like concat('%',:searchName,'%') "
				+ "AND u.username like :searchUsername "
				+ "AND (:searchUserCreator IS NULL OR u.created_by = :searchUserCreator OR u.updated_by =:searchUserCreator) "
				+ "AND (:searchDistrict IS NULL OR ud.district_id = :searchDistrict) "
				+ "AND (:searchEntryPoint IS NULL OR u.entry_point = cast(:searchEntryPoint as char)) "
				+ "and ud.district_id in (:districts) order by uls.last_sync_date desc", resultClass = UserLastSync.class),
		@NamedNativeQuery(name = "UserLastSync.findByProvinces", query = "SELECT uls.* FROM users_last_sync uls "
				+ "left join users u on u.id = uls.user_id " 
				+ "left join users_provinces up on up.user_id = u.id " 
				+ "LEFT JOIN users_districts ud on ud.user_id = u.id "
				+ "where concat(u.name, \' \' ,u.surname) like concat('%',:searchName,'%') "
				+ "AND u.username like :searchUsername "
				+ "AND (:searchUserCreator IS NULL OR u.created_by = :searchUserCreator OR u.updated_by =:searchUserCreator) "
				+ "AND (:searchDistrict IS NULL OR ud.district_id = :searchDistrict) "
				+ "AND (:searchEntryPoint IS NULL OR u.entry_point = cast(:searchEntryPoint as char)) "
				+ "AND up.province_id in (:provinces)  order by uls.last_sync_date desc", resultClass = UserLastSync.class),
		@NamedNativeQuery(name = "UserLastSync.countByDistricts", query = "SELECT count(uls.id) FROM users_last_sync uls  "
				+ "left join users u on u.id = uls.user_id " 
				+ "LEFT JOIN users_districts ud on ud.user_id = u.id "
				+ "where concat(u.name, \' \' ,u.surname) like concat('%',:searchName,'%') "
				+ "AND u.username like :searchUsername "
				+ "AND (:searchUserCreator IS NULL OR u.created_by = :searchUserCreator OR u.updated_by =:searchUserCreator) "
				+ "AND (:searchDistrict IS NULL OR ud.district_id = :searchDistrict) "
				+ "AND (:searchEntryPoint IS NULL OR u.entry_point = cast(:searchEntryPoint as char)) "
				+ "AND ud.district_id in (:districts) order by uls.last_sync_date desc"),
		@NamedNativeQuery(name = "UserLastSync.countByProvinces", query = "SELECT count(uls.user_id) FROM users_last_sync uls "
				+ "left join users u on u.id = uls.user_id " 
				+ "left join users_provinces up on up.user_id = u.id " 
				+ "LEFT JOIN users_districts ud on ud.user_id = u.id "
				+ "where concat(u.name, \' \' ,u.surname) like concat('%',:searchName,'%') "
				+ "AND u.username like :searchUsername "
				+ "AND (:searchUserCreator IS NULL OR u.created_by = :searchUserCreator OR u.updated_by =:searchUserCreator) "
				+ "AND (:searchDistrict IS NULL OR ud.district_id = :searchDistrict) "
				+ "AND (:searchEntryPoint IS NULL OR u.entry_point = cast(:searchEntryPoint as char)) "
				+ "AND up.province_id in (:provinces)  order by uls.last_sync_date desc"), })

public class UserLastSync implements java.io.Serializable {

	private static final long serialVersionUID = 1L;

	private Integer id;
	private String username;
	private Users user;
	private Date lastSyncDate;
	private String appVersion;

	public UserLastSync() {
	}

	public UserLastSync(String username) {

		this.username = username;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "username", length = 45)
	public String getUsername() {
		return this.username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_sync_date", length = 19)
	public Date getLastSyncDate() {
		return lastSyncDate;
	}

	public void setLastSyncDate(Date lastSyncDate) {
		this.lastSyncDate = lastSyncDate;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "user_id", nullable = true)
	public Users getUser() {
		return user;
	}

	public void setUser(Users user) {
		this.user = user;
	}

	@Column(name = "app_version", length = 10)
	public String getAppVersion() {
		return appVersion;
	}

	public void setAppVersion(String appVersion) {
		this.appVersion = appVersion;
	}
}
