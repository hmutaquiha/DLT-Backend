package dlt.dltbackendmaster.domain;
// Generated Jun 13, 2022, 9:37:47 AM by Hibernate Tools 5.2.12.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.NamedQuery;
import javax.persistence.NamedQueries;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;

/**
 * Profiles generated by hbm2java
 */
@Entity
@Table(name = "profiles", catalog = "dreams_db")
@NamedQueries({
    @NamedQuery(name = "Profiles.findAll", query = "SELECT c FROM Profiles c where c.status=1"),
    @NamedQuery(name = "Profiles.findByDateCreated", query = "SELECT c FROM Profiles c WHERE c.dateCreated >= :lastpulledat"),
    @NamedQuery(name = "Profiles.findByDateUpdated", query = "SELECT c FROM Profiles c WHERE c.dateCreated < :lastpulledat and c.dateUpdated >= :lastpulledat"),
    @NamedQuery(name = "Profiles.findProfiles", query = "SELECT p.id as id, p.name as name, p.description as description FROM Profiles p where p.status=1"),    
})
public class Profiles implements java.io.Serializable {

	private static final long serialVersionUID = 3465583000432844297L;
	private Integer id;
	private String name;
	private String description;
	private int status;
	private Date dateCreated;
	private Integer createdBy;
	private Date dateUpdated;
	private Integer updatedBy;
	private Set<Users> userses = new HashSet<Users>(0);

	public Profiles() {
	}

	public Profiles(String name) {
		this.name = name;
	}

	public Profiles(String name, String description, int status, Date dateCreated, Integer createdBy, Date dateUpdated,
			Integer updatedBy, Set<Users> userses) {
		this.name = name;
		this.description = description;
		this.status = status;
		this.dateCreated = dateCreated;
		this.createdBy = createdBy;
		this.dateUpdated = dateUpdated;
		this.updatedBy = updatedBy;
		this.userses = userses;
	}
	
	public Profiles(Integer id) {
		this.id = id;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "name", nullable = false, length = 150)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Column(name = "description", length = 250)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "status", nullable = false)
    public int getStatus() {
		return status;
	}

	public void setStatus(int status) {
		this.status = status;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_created", length = 19)
	public Date getDateCreated() {
		return this.dateCreated;
	}

	public void setDateCreated(Date dateCreated) {
		this.dateCreated = dateCreated;
	}

	@Column(name = "created_by")
	public Integer getCreatedBy() {
		return this.createdBy;
	}

	public void setCreatedBy(Integer createdBy) {
		this.createdBy = createdBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_updated", length = 19)
	public Date getDateUpdated() {
		return this.dateUpdated;
	}

	public void setDateUpdated(Date dateUpdated) {
		this.dateUpdated = dateUpdated;
	}

	@Column(name = "updated_by")
	public Integer getUpdatedBy() {
		return this.updatedBy;
	}

	public void setUpdatedBy(Integer updatedBy) {
		this.updatedBy = updatedBy;
	}

	@JsonIgnore
	@OneToMany(fetch = FetchType.LAZY, mappedBy = "profiles")
	public Set<Users> getUserses() {
		return this.userses;
	}

	public void setUserses(Set<Users> userses) {
		this.userses = userses;
	}

	public ObjectNode toObjectNode() {
		ObjectMapper mapper = new ObjectMapper();
		
		ObjectNode profile = mapper.createObjectNode();
		profile.put("id", id);
		profile.put("name", name);
		profile.put("description", description);
        profile.put("status", status);
		profile.put("online_id", id); // flag to control if entity is synchronized with the backend
		return profile;
	} 
}
